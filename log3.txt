ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:

ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:

ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:

ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:

ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:

ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:

ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:

ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:

ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:

ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:

ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
a = bool
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
a = bool
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
v = int
a = bool
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
v = int
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
a = true
v = int
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
a = true
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
if(a){v = 2}else{v = 3}
a = true
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:
if(a){v = 2}else{v = 3}
a = true
v = 2
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:
print(v)
if(a){v = 2}else{v = 3}
a = true
v = 2
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
a = bool
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
a = bool
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
v = int
a = bool
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
v = int
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = true
v = int
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = true
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
if(a){v = 2}else{v = 3}
a = true
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:
Binary Tree:
if(a){v = 2}else{v = 3}
a = true
v = 2
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:
Binary Tree:
print(v)
if(a){v = 2}else{v = 3}
a = true
v = 2
v = int
if(a){v = 2}else{v = 3};print(v)
a = bool
a = true;if(a){v = 2}else{v = 3};print(v)
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:


ExeStack:
SymTable:
Out:
FileTable:
Binary Tree:



ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool

ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int

ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int
a = true;if(a){v = 2}else{v = 3};print(v)

ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int
a = true;if(a){v = 2}else{v = 3};print(v)
a = true

ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int
a = true;if(a){v = 2}else{v = 3};print(v)
a = true
if(a){v = 2}else{v = 3};print(v)

ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int
a = true;if(a){v = 2}else{v = 3};print(v)
a = true
if(a){v = 2}else{v = 3};print(v)
if(a){v = 2}else{v = 3}

ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int
a = true;if(a){v = 2}else{v = 3};print(v)
a = true
if(a){v = 2}else{v = 3};print(v)
if(a){v = 2}else{v = 3}
v = 2

ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:
Binary Tree:
a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
a = bool
v = int;a = true;if(a){v = 2}else{v = 3};print(v)
v = int
a = true;if(a){v = 2}else{v = 3};print(v)
a = true
if(a){v = 2}else{v = 3};print(v)
if(a){v = 2}else{v = 3}
v = 2
print(v)

ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:
Binary Tree:

ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
a = bool

ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:
Binary Tree:
a = bool

ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool
v = int

ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool
v = int

ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool
v = int
a = true

ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool
v = int
a = true

ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:
Binary Tree:
a = bool
v = int
a = true
if(a){v = 2}else{v = 3}

ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:
Binary Tree:
a = bool
v = int
a = true
if(a){v = 2}else{v = 3}
v = 2

ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:
Binary Tree:
a = bool
v = int
a = true
if(a){v = 2}else{v = 3}
v = 2

ExeStack:
   a = bool;v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:

ExeStack:
   a = bool
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
Out:
FileTable:

ExeStack:
   v = int;a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:

ExeStack:
   v = int
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
Out:
FileTable:

ExeStack:
   a = true;if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:

ExeStack:
   a = true
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> false
   v -> 0
Out:
FileTable:

ExeStack:
   if(a){v = 2}else{v = 3};print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:

ExeStack:
   if(a){v = 2}else{v = 3}
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:

ExeStack:
   v = 2
   print(v)
SymTable:
   a -> true
   v -> 0
Out:
FileTable:

ExeStack:
   print(v)
SymTable:
   a -> true
   v -> 2
Out:
FileTable:

ExeStack:
SymTable:
   a -> true
   v -> 2
Out:
   2
FileTable:

